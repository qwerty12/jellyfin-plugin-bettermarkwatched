diff --git a/Emby.Server.Implementations/Library/UserDataManager.cs b/Emby.Server.Implementations/Library/UserDataManager.cs
index 8beeb8041..b24df07c8 100644
--- a/Emby.Server.Implementations/Library/UserDataManager.cs
+++ b/Emby.Server.Implementations/Library/UserDataManager.cs
@@ -250,6 +250,15 @@ namespace Emby.Server.Implementations.Library
             };
         }
 
+        private void SetPlayed(UserItemData data)
+        {
+            data.Played = true;
+            if (_config.Configuration.UpdateLastPlayedAndPlayCountOnPlayCompletion)
+            {
+                data.LastPlayedDate = DateTime.UtcNow;
+            }
+        }
+
         /// <inheritdoc />
         public bool UpdatePlayState(BaseItem item, UserItemData data, long? reportedPositionTicks)
         {
@@ -274,7 +283,8 @@ namespace Emby.Server.Implementations.Library
                 {
                     // mark as completed close to the end
                     positionTicks = 0;
-                    data.Played = playedToCompletion = true;
+                    playedToCompletion = true;
+                    SetPlayed(data);
                 }
                 else
                 {
@@ -283,7 +293,8 @@ namespace Emby.Server.Implementations.Library
                     if (durationSeconds < _config.Configuration.MinResumeDurationSeconds)
                     {
                         positionTicks = 0;
-                        data.Played = playedToCompletion = true;
+                        playedToCompletion = true;
+                        SetPlayed(data);
                     }
                 }
             }
@@ -301,14 +312,16 @@ namespace Emby.Server.Implementations.Library
                 {
                     // mark as completed close to the end
                     positionTicks = 0;
-                    data.Played = playedToCompletion = true;
+                    playedToCompletion = true;
+                    SetPlayed(data);
                 }
             }
             else if (!hasRuntime)
             {
                 // If we don't know the runtime we'll just have to assume it was fully played
-                data.Played = playedToCompletion = true;
                 positionTicks = 0;
+                playedToCompletion = true;
+                SetPlayed(data);
             }
 
             if (!item.SupportsPlayedStatus)
diff --git a/Emby.Server.Implementations/Session/SessionManager.cs b/Emby.Server.Implementations/Session/SessionManager.cs
index 3dda5fdee..49abcc3d6 100644
--- a/Emby.Server.Implementations/Session/SessionManager.cs
+++ b/Emby.Server.Implementations/Session/SessionManager.cs
@@ -744,12 +744,22 @@ namespace Emby.Server.Implementations.Session
         {
             var data = _userDataManager.GetUserData(user, item);
 
-            data.PlayCount++;
-            data.LastPlayedDate = DateTime.UtcNow;
+            if (!_config.Configuration.UpdateLastPlayedAndPlayCountOnPlayCompletion)
+            {
+                data.PlayCount++;
+                data.LastPlayedDate = DateTime.UtcNow;
+            }
 
-            if (item.SupportsPlayedStatus && !item.SupportsPositionTicksResume)
+            if (item.SupportsPlayedStatus)
             {
-                data.Played = true;
+                if (!item.SupportsPositionTicksResume)
+                {
+                    data.Played = true;
+                }
+                else if (_config.Configuration.MarkResumableItemUnplayedOnPlay)
+                {
+                    data.Played = false;
+                }
             }
             else
             {
@@ -1025,6 +1035,11 @@ namespace Emby.Server.Implementations.Session
             if (positionTicks.HasValue)
             {
                 playedToCompletion = _userDataManager.UpdatePlayState(item, data, positionTicks.Value);
+                if (playedToCompletion && _config.Configuration.UpdateLastPlayedAndPlayCountOnPlayCompletion)
+                {
+                    data.PlayCount++;
+                    data.LastPlayedDate = DateTime.UtcNow;
+                }
             }
             else
             {
diff --git a/MediaBrowser.Model/Configuration/ServerConfiguration.cs b/MediaBrowser.Model/Configuration/ServerConfiguration.cs
index 52f7e53b8..ac0747847 100644
--- a/MediaBrowser.Model/Configuration/ServerConfiguration.cs
+++ b/MediaBrowser.Model/Configuration/ServerConfiguration.cs
@@ -128,6 +128,18 @@ public class ServerConfiguration : BaseApplicationConfiguration
     /// <value>The sort remove words.</value>
     public string[] SortRemoveWords { get; set; } = new[] { "the", "a", "an" };
 
+    /// <summary>
+    /// Gets or sets a value indicating whether to mark a resumable item being played as unplayed when the play starts.
+    /// </summary>
+    /// <value><c>true</c> if this resumable item should be marked unplayed; otherwise, <c>false</c> item play state will not change when play starts.</value>
+    public bool MarkResumableItemUnplayedOnPlay { get; set; } = true;
+
+    /// <summary>
+    /// Gets or sets a value indicating whether to set LastPlayed time and increment playcount only when played to completion, or on every play start.
+    /// </summary>
+    /// <value><c>true</c> if playcount and lastplayed update on play completion; otherwise, <c>false</c> playcount and lastplayed update on play start.</value>
+    public bool UpdateLastPlayedAndPlayCountOnPlayCompletion { get; set; } = false;
+
     /// <summary>
     /// Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.
     /// </summary>
